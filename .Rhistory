omega_treat = 1/2,
number_of_trees_treat = 200,
N_post = 1000,
N_burn = 1000
)
if (requireNamespace("survival", quietly = TRUE)) {
# Compute C-index
predicted_survtime <- fit$train_predictions
cindex_result <- survival::concordance(Surv(time = time, event = status) ~ predicted_survtime)
c_index <- cindex_result$concordance
cat("C-index:", c_index, "\n")
} else {
cat("Package 'survival' not available. Skipping C-index computation.\n")
}
# Compute posterior ATE samples
ate_samples <- rowMeans(fit$train_predictions_sample_treat)
mean_ate <- mean(ate_samples)
ci_95 <- quantile(ate_samples, probs = c(0.025, 0.975))
# Create a data frame (optional, for further inspection or plotting)
df <- data.frame(ate = ate_samples)
# Present the results nicely
cat("Posterior mean ATE:", round(mean_ate, 3), "\n")
cat("95% credible interval: [", round(ci_95[1], 3), ", ", round(ci_95[2], 3), "]\n", sep = "")
# Plot histogram
hist(ate_samples,
breaks = 30,
col = col_treated,
freq = FALSE,
border = "white",
xlab = "Average Treatment Effect",
ylab = NULL,
main = "Posterior distribution of ATE")
# Add vertical lines for mean and credible interval
abline(v = mean_ate, col = "darkorchid4", lwd = 2)
abline(v = ci_95, col = "darkorchid4", lty = 2, lwd = 2)
# Add legend
legend("topright",
legend = c("Mean", "95% CI"),
col = c("darkorchid4", "darkorchid4"),
lty = c(1, 2),
lwd = 2)
# Prepare CATE summary
posterior_matrix <- fit$train_predictions_sample_treat
posterior_mean <- colMeans(posterior_matrix)
posterior_ci <- apply(posterior_matrix, 2, quantile, probs = c(0.025, 0.975))
df_cate <- data.frame(
mean = posterior_mean,
lower = posterior_ci[1, ],
upper = posterior_ci[2, ]
)
# Sort by mean CATE
df_cate_sorted <- df_cate[order(df_cate$mean), ]
n <- nrow(df_cate_sorted)
# Initialize empty plot
plot(
x = df_cate_sorted$mean,
y = 1:n,
type = "n",
xlab = "CATE per patient (95% credible interval)",
ylab = "Patient index (sorted)",
main = "Posterior CATE estimates",
xlim = range(df_cate_sorted$lower, df_cate_sorted$upper)
)
# Draw intervals
segments(
x0 = df_cate_sorted$lower,
x1 = df_cate_sorted$upper,
y0 = 1:n,
y1 = 1:n,
col = col_treated
)
# Draw posterior means
lines(df_cate_sorted$mean, 1:n, col = "darkorchid4", lwd = 2)
# Reference line at 0
abline(v = 0, col = "black", lwd = 2)
# Plot the sigma trace
plot(fit$sigma,
type = "l",
xlab = "Iteration",
ylab = expression(sigma),
main = "Traceplot of Sigma",
col = rgb(0, 0.5, 0, 0.5)
)
devtools::document()
demo("pdac_analysis", package = "ShrinkageTrees")
names(fit)
devtools::document()
?HorseTrees
devtools::check()
X <- matrix(rnorm(100 * p), ncol = p)
X_test <- matrix(rnorm(50 * p), ncol = p)
y <- X[, 1] + X[, 2] - X[, 3] + rnorm(100, sd = 0.5)
fit <- HorseTrees(y,
X_train = X,
X_test = X_test,
outcome_type = "continuous",
number_of_trees = 20,
N_post = 75,
N_burn = 25,
store_posterior_sample = TRUE,
verbose = TRUE)
plot(fit$test_predictions, main = "Posterior mean predictions (test)",
ylab = "Prediction")
plot(fit$sigma, type = "l", ylab = expression(sigma),
xlab = "Iteration", main = "Sigma traceplot")
hist(fit$train_predictions_sample[1, ],
main = "Train predictions (1st posterior sample)",
xlab = "Prediction", breaks = 20)
?HorseTrees
devtools::document()
?HorseTrees
devtools::check()
devtools::document()
?HorseTrees
devtools::document()
?ShrinkageTrees
devtools::document()
devtools::document()
?ShrinkageTrees
devtools::document()
?ShrinkageTrees
devtools::document()
?HorseTrees
devtools::check()
devtools::install()
.rs.restartR()
# Load package
library(ShrinkageTrees)
# Load the data
data("pdac")
# Retrieve the data
time <- pdac_plain$time
status <- pdac_plain$status
treatment <- pdac_plain$treatment
covariates <- pdac_plain[, !(colnames(pdac_plain) %in% c("time", "status", "treatment"))]
# Estimate the propensity scores
propensity_fit <- ShrinkageTrees::HorseTrees(
y = treatment,
X_train = covariates,
outcome_type = "binary",
k = 0.1,
N_post = 1000,
N_burn = 1000
)
# Retrieve estimated propensity scores
propensity <- pnorm(propensity_fit$train_predictions)
# Define p0 and p1
p0 <- propensity[treatment == 0]
p1 <- propensity[treatment == 1]
# Define colors
col_treated <- rgb(0, 0.5, 0, 0.5)  # green
col_control <- rgb(1, 0.5, 0, 0.5)  # orange
# Plot histograms
hist(p0,
breaks = 10,
xlim = range(propensity),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap"
)
hist(p1,
breaks = 10,
xlim = range(propensity),
col = col_treated,
add = TRUE
)
legend("topright",
legend = c("Control", "Treated"),
fill = c(col_control, col_treated)
)
# Placeholder for your analysis
cat("\nAnalysis section TBD\n")
# Adjust prognostic covariates
extended_covariates <- cbind(propensity, covariates)
# Define X_test
X_test <- covariates
# Plot histograms
hist(p0,
breaks = 10,
xlim = range(propensity),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap",
xlim = c(0.3, 0.65)
)
# Plot histograms
hist(p0,
breaks = 10,
xlim = c(0.3, 0.65),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap",
)
hist(p1,
breaks = 10,
xlim = range(propensity),
col = col_treated,
add = TRUE
)
# Plot histograms
hist(p0,
breaks = 10,
xlim = c(0.32, 0.62),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap",
)
hist(p1,
breaks = 10,
xlim = range(propensity),
col = col_treated,
add = TRUE
)
istograms
# Plot histograms
hist(p0,
breaks = 10,
xlim = c(0.35, 0.65),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap",
)
hist(p1,
breaks = 10,
xlim = range(propensity),
col = col_treated,
add = TRUE
)
# Plot histograms
hist(p0,
breaks = 10,
xlim = c(0.32, 0.63),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap",
)
# Plot histograms
hist(p0,
breaks = 10,
xlim = c(0.33, 0.63),
col = col_control,
xlab = "Propensity score",
ylab = "Frequency",
main = "Propensity score overlap",
)
hist(p1,
breaks = 10,
xlim = range(propensity),
col = col_treated,
add = TRUE
)
legend("topright",
legend = c("Control", "Treated"),
fill = c(col_control, col_treated)
)
devtools::check()
Rcpp::compileAttributes("/Users/tijnjacobs/Library/CloudStorage/OneDrive-VrijeUniversiteitAmsterdam/Documents/GitHub/ShrinkageTrees")
devtools::check()
devtools::check()
Rcpp::compileAttributes("/Users/tijnjacobs/Library/CloudStorage/OneDrive-VrijeUniversiteitAmsterdam/Documents/GitHub/ShrinkageTrees")
devtools::check()
devtools::document()
usethis::use_data(pdac, overwrite = TRUE)
# Load the data
data("pdac")
str("pdac")
# Load the data
data("pdac_plain")
pdac
pdac_plain
str(pdac_plain)
dim(pdac_plain)
pdac <- pdac_plain
usethis::use_data(pdac, overwrite = TRUE)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::test()
devtools::test()
devtools::test()
# Generate covariates
X <- matrix(rnorm(50 * 3), ncol = 3)
X_test <- matrix(runif(50 * 3), ncol = 3)
# Generate survival times (exponential baseline hazard depending on X[,1])
linpred <- X[, 1]
true_time <- rexp(50, rate = exp(linpred))
# Generate censoring times
censor_time <- rexp(50, rate = 0.5)
# Observed time and status indicator
time_obs <- pmin(true_time, censor_time)
status <- as.numeric(true_time <= censor_time)
# Fit the model
fit <- HorseTrees(y = time_obs,
X_train = X,
X_test = X_test,
outcome_type = "right-censored",
status = status,
number_of_trees = 5,
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
# Basic checks
expect_type(fit, "list")
expect_true("train_predictions" %in% names(fit))
expect_true("test_predictions" %in% names(fit))
expect_true("test_predictions" %in% names(fit))
expect_length(fit$train_predictions, 50)
expect_length(fit$sigma, 10 + 5)
# Numerical checks
expect_false(any(is.na(fit$train_predictions)))
expect_false(any(is.nan(fit$train_predictions)))
expect_true(all(is.finite(fit$train_predictions)))
# Check posterior samples
expect_true("train_predictions_sample" %in% names(fit))
expect_true("test_predictions_sample" %in% names(fit))
expect_equal(dim(fit$train_predictions_sample), c(10, 50))
expect_equal(dim(fit$test_predictions_sample), c(10, 50))
# Check sigma positivity
expect_true(all(fit$sigma > 0))
# Check predictions are not all constant
expect_true(sd(fit$train_predictions) > 0)
expect_true(sd(fit$train_predictions_sample) > 0)
expect_true(sd(fit$test_predictions) > 0)
expect_true(sd(fit$test_predictions_sample) > 0)
devtools::check()
devtools::check()
devtools::check()
usethis::use_test("ShrinkageTrees")
View(genes_filtered)
?ShrinkageTrees
# Generate data
X <- matrix(runif(50 * 3), ncol = 3)
X_test <- matrix(runif(50 * 3), ncol = 3)
y <- X[, 1] + rnorm(50)
# Fit the model
fit <- ShrinkageTrees(y,
X,
X_test,
outcome_type = "continuous",
number_of_trees = 50,
prior_type = "horseshoe",
local_hp = 0.1/sqrt(50),
global_hp = 0.1/sqrt(50),
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
# Basic checks
expect_type(fit, "list")
expect_true("train_predictions" %in% names(fit))
expect_true("test_predictions" %in% names(fit))
expect_length(fit$train_predictions, 50)
expect_length(fit$sigma, 10 + 5)
# Numerical checks
expect_false(any(is.na(fit$train_predictions)))
expect_false(any(is.nan(fit$train_predictions)))
expect_true(all(is.finite(fit$train_predictions)))
# Check posterior samples
expect_true("train_predictions_sample" %in% names(fit))
expect_true("test_predictions_sample" %in% names(fit))
expect_equal(dim(fit$train_predictions_sample), c(10, 50))
expect_equal(dim(fit$test_predictions_sample), c(10, 50))
# Check sigma positivity
expect_true(all(fit$sigma > 0))
# Check predictions are not all zero
expect_true(sd(fit$train_predictions) > 0)
expect_true(sd(fit$train_predictions_sample) > 0)
expect_true(sd(fit$test_predictions) > 0)
expect_true(sd(fit$test_predictions_sample) > 0)
# Check reproducibility
fit2 <- HorseTrees(y, X, outcome_type = "continuous", number_of_trees = 5,
N_post = 10, N_burn = 5, store_posterior_sample = TRUE,
verbose = FALSE, seed = 1)
expect_equal(fit$train_predictions, fit2$train_predictions)
test_that("HorseTrees works for continuous outcome (extended)", {
# Generate data
X <- matrix(runif(50 * 3), ncol = 3)
X_test <- matrix(runif(50 * 3), ncol = 3)
y <- X[, 1] + rnorm(50)
# Fit the model
fit <- ShrinkageTrees(y,
X,
X_test,
outcome_type = "continuous",
number_of_trees = 50,
prior_type = "horseshoe",
local_hp = 0.1/sqrt(50),
global_hp = 0.1/sqrt(50),
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
# Basic checks
expect_type(fit, "list")
expect_true("train_predictions" %in% names(fit))
expect_true("test_predictions" %in% names(fit))
expect_length(fit$train_predictions, 50)
expect_length(fit$sigma, 10 + 5)
# Numerical checks
expect_false(any(is.na(fit$train_predictions)))
expect_false(any(is.nan(fit$train_predictions)))
expect_true(all(is.finite(fit$train_predictions)))
# Check posterior samples
expect_true("train_predictions_sample" %in% names(fit))
expect_true("test_predictions_sample" %in% names(fit))
expect_equal(dim(fit$train_predictions_sample), c(10, 50))
expect_equal(dim(fit$test_predictions_sample), c(10, 50))
# Check sigma positivity
expect_true(all(fit$sigma > 0))
# Check predictions are not all zero
expect_true(sd(fit$train_predictions) > 0)
expect_true(sd(fit$train_predictions_sample) > 0)
expect_true(sd(fit$test_predictions) > 0)
expect_true(sd(fit$test_predictions_sample) > 0)
# Check reproducibility
fit2 <- HorseTrees(y, X, outcome_type = "continuous", number_of_trees = 5,
N_post = 10, N_burn = 5, store_posterior_sample = TRUE,
verbose = FALSE, seed = 1)
expect_equal(fit$train_predictions, fit2$train_predictions)
})
devtools::test()
devtools::test()
devtools::test()
# Fit the model
fit <- ShrinkageTrees(y,
X,
X_test,
outcome_type = "continuous",
number_of_trees = 50,
prior_type = "horseshoe_FW",
local_hp = 0.1/sqrt(50),
global_hp = 0.1/sqrt(50),
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
# Fit the model
fit <- ShrinkageTrees(y,
X,
X_test,
outcome_type = "continuous",
number_of_trees = 50,
prior_type = "horseshoe_fw",
local_hp = 0.1/sqrt(50),
global_hp = 0.1/sqrt(50),
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
# Fit the model
fit <- ShrinkageTrees(y,
X,
X_test,
outcome_type = "continuous",
number_of_trees = 50,
prior_type = "horseshoe_fw",
local_hp = 0.1/sqrt(50),
global_hp = 0.1/sqrt(50),
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
# Fit the model
fit <- ShrinkageTrees(y,
X,
X_test,
outcome_type = "continuous",
number_of_trees = 50,
prior_type = "horseshoe_FW",
local_hp = 0.1/sqrt(50),
global_hp = 0.1/sqrt(50),
N_post = 10,
N_burn = 5,
store_posterior_sample = TRUE,
verbose = FALSE,
seed = 1)
devtools::install()
.rs.restartR()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
.rs.restartR()
.rs.restartR()
.rs.restartR()
